// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.statelessComponent("App");

var ppx_printed_query = "query Dragons  {\ndragons  {\nid  \nname  \nowners  {\nid  \nname  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "dragons");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "id");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeNumber(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "name");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      var match$8 = Js_dict.get(value$1, "owners");
                      var tmp$3;
                      if (match$8 !== undefined) {
                        var value$4 = Caml_option.valFromOption(match$8);
                        var match$9 = Js_json.decodeNull(value$4);
                        if (match$9 !== undefined) {
                          tmp$3 = undefined;
                        } else {
                          var match$10 = Js_json.decodeArray(value$4);
                          tmp$3 = match$10 !== undefined ? match$10.map((function (value) {
                                    var match = Js_json.decodeNull(value);
                                    if (match !== undefined) {
                                      return undefined;
                                    } else {
                                      var match$1 = Js_json.decodeObject(value);
                                      var tmp;
                                      if (match$1 !== undefined) {
                                        var value$1 = Caml_option.valFromOption(match$1);
                                        var match$2 = Js_dict.get(value$1, "id");
                                        var tmp$1;
                                        if (match$2 !== undefined) {
                                          var value$2 = Caml_option.valFromOption(match$2);
                                          var match$3 = Js_json.decodeNull(value$2);
                                          if (match$3 !== undefined) {
                                            tmp$1 = undefined;
                                          } else {
                                            var match$4 = Js_json.decodeNumber(value$2);
                                            tmp$1 = match$4 !== undefined ? match$4 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$2));
                                          }
                                        } else {
                                          tmp$1 = undefined;
                                        }
                                        var match$5 = Js_dict.get(value$1, "name");
                                        var tmp$2;
                                        if (match$5 !== undefined) {
                                          var value$3 = Caml_option.valFromOption(match$5);
                                          var match$6 = Js_json.decodeNull(value$3);
                                          if (match$6 !== undefined) {
                                            tmp$2 = undefined;
                                          } else {
                                            var match$7 = Js_json.decodeString(value$3);
                                            tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                                          }
                                        } else {
                                          tmp$2 = undefined;
                                        }
                                        tmp = {
                                          id: tmp$1,
                                          name: tmp$2
                                        };
                                      } else {
                                        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                                      }
                                      return Caml_option.some(tmp);
                                    }
                                  })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$4));
                        }
                      } else {
                        tmp$3 = undefined;
                      }
                      tmp = {
                        id: tmp$1,
                        name: tmp$2,
                        owners: tmp$3
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            dragons: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var Dragons = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var DragonsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function make$1(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return React.createElement("div", undefined, React.createElement("h2", undefined, "ReasonML + ReasonReact + GraphQL"));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.str = str;
exports.component = component;
exports.Dragons = Dragons;
exports.DragonsQuery = DragonsQuery;
exports.make = make$1;
/* component Not a pure module */
